# Copyright 2025 the original author or authors.
# <p>
# Licensed under the Moderne Source Available License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# https://docs.moderne.io/licensing/moderne-source-available-license
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.joda.time.JodaTimeRecipe
examples:
- description: '`JodaTimeRecipeTest#migrateSafeVariable`'
  sources:
  - before: |
      import org.joda.time.DateTime;

      class A {
          public void foo() {
              DateTime dt = new DateTime();
              System.out.println(dt.toDateTime());
          }
      }
    after: |
      import java.time.ZonedDateTime;

      class A {
          public void foo() {
              ZonedDateTime dt = ZonedDateTime.now();
              System.out.println(dt);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.joda.time.NoJodaTime
examples:
- description: '`NoJodaTimeTest#migrateJodaTime`'
  sources:
  - before: |
      import org.joda.time.DateTime;
      import org.joda.time.Interval;

      class A {
          void foo() {
              DateTime dt = new DateTime();
              DateTime dt1 = new DateTime().plusDays(1);
              Interval i = new Interval(dt, dt1);
              System.out.println(i.toDuration());
          }
      }
    after: |
      import org.threeten.extra.Interval;

      import java.time.ZonedDateTime;

      class A {
          void foo() {
              ZonedDateTime dt = ZonedDateTime.now();
              ZonedDateTime dt1 = ZonedDateTime.now().plusDays(1);
              Interval i = Interval.of(dt.toInstant(), dt1.toInstant());
              System.out.println(i.toDuration());
          }
      }
    language: java
  - before: foo
    language: mavenProject
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example.foobar</groupId>
          <artifactId>foobar-core</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>joda-time</groupId>
                  <artifactId>joda-time</artifactId>
                  <version>2.12.3</version>
              </dependency>
          </dependencies>
      </project>
    after: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example.foobar</groupId>
          <artifactId>foobar-core</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>joda-time</groupId>
                  <artifactId>joda-time</artifactId>
                  <version>2.12.3</version>
              </dependency>
              <dependency>
                  <groupId>org.threeten</groupId>
                  <artifactId>threeten-extra</artifactId>
                  <version>1.8.0</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
